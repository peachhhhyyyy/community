import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import { Inter } from "@next/font/google";
import styles from "../styles/Home.module.css";
import BaseLayout from "../components/BaseLayout";
import db from "../net/db";
import {
	collection,
	getDocs,
	orderBy,
	query,
	onSnapshot,
} from "firebase/firestore";
import { useEffect, useState } from "react";
import { DateTime } from "luxon";

// 기존에 있었던 내용
const inter = Inter({ subsets: ["latin"] });

export default function Home() {
	// getDocs를 호출하는 게 이 페이지를 로드하는 시점에서 한 번만 렌더링 되면 될 것이다.
	// 데이터는 최소한 렌더링 될때마다 계속 불러와져서는 안된다.

	const [list, setList] = useState([]);

	// useEffect가 실행되면서 onSnapshot이 실행되는데 실시간으로 반영하는 게 필요한 경우 사용할 수 있다.
	useEffect(() => {
		onSnapshot(
			query(collection(db, "posts"), orderBy("create_at", "desc")),
			(results) => {
				const newList = [];
				results.forEach((doc) => {
					const data = doc.data();
					data.id = doc.id;
					newList.push(data);
				});
				setList(newList);
			}
		);

		/*
		getDocs(
			query(collection(db, "posts"), orderBy("create_at", "desc"))
		).then((results) => {
			const newList = [];
			results.forEach((doc) => {
				const data = doc.data();
				data.id = doc.id;
				newList.push(data);
			});
			setList(newList);
		});
		*/
	}, []);

	return (
		<BaseLayout>
			<Head>
				<title>Create Next App</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<meta
					name="viewport"
					content="width=device-width, initial-scale=1"
				/>
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<div className="container mx-auto w-full">
				<ul>
					<li className="flex flex-row w-full border-b p-2 mb-4">
						<div className="flex-1 font-bold">제목</div>
						<div className="w-64 font-bold">작성자</div>
						<div className="w-64 font-bold">작성일시</div>
					</li>
					{list.map((item) => (
						<li
							key={item.id}
							className="flex flex-row w-full border-b p-2 mb-4"
						>
							<div className="flex-1">
								<Link href={`/posts/${item.id}`}>
									{item.subject}
								</Link>
							</div>
							<div className="w-64">{item.author}</div>
							<div className="w-64">
								{DateTime.fromMillis(item.create_at).toFormat(
									"yyyy-LL-dd HH:mm:ss"
								)}
							</div>
						</li>
					))}
				</ul>

				<div className="mt-8 w-full flex justify-end">
					<Link href="/create">
						<button className="p-2 bg-black text-white">
							글쓰기
						</button>
					</Link>
				</div>
			</div>
		</BaseLayout>
	);
}
